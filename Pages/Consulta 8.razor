@page "/Consulta8"
@inject IJSRuntime JSRuntime
@implements IDisposable

<header>
    <div class="alert alert-secondary mt-4" role="alert">
        <center>
            <b>Mostrar los suplidores y la cantidad de productos que suplen. Mostrarlos de mayor a menor, mostrando el codigo de suplidor, nombre y cantidad de productos que este suple.</b>
        </center>
    </div>
</header>

<section class="container-fluid">
    <table class="table table-bordered table-hover" id="example">
        <thead class="thead-dark">
            <tr>
                <th>Código del Suplidor</th>
                <th>Nombre</th>
                <th>Cantidad de productos</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Suppliers in db.Products
           .Where(p => !p.SupplierIds.Contains(";"))
           .Join(db.Suppliers, p => p.SupplierIds, s => s.Id.ToString(), (p, s) => new { Products = p, Suppliers = s })
           .AsEnumerable()
           .GroupBy(p => p.Products.SupplierIds)
           .Select(p => new
           {
               Code = p.Key,
               Name = $"{p.First().Suppliers.FirstName} {p.First().Suppliers.LastName}",
               Count = p.Count()
           })
           .OrderByDescending(p => p.Count)
           )
            {
                <tr>
                    <td>@Suppliers.Code</td>
                    <td>@Suppliers.Name</td>
                    <td>@Suppliers.Count</td>
                </tr>
            }
        </tbody>
    </table>
</section>

@code{
    northwindContext db = new northwindContext();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    void IDisposable.Dispose()
    {
        JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#example");
    }
}
